const express = require('express');
const axios = require('axios');

const app = express();
const PORT = 3000;

// Configuration
const WINDOW_SIZE = 10;
const API_TIMEOUT = 500;
const NUMBERS_API_URL = "http://localhost:4000/api/numbers/";

let numbersWindow = [];

// Helper function to fetch number from third-party server
const fetchNumber = async (numberId) => {
    try {
        const response = await axios.get(`${NUMBERS_API_URL}${numberId}`, {
            timeout: API_TIMEOUT
        });
        if (response.status === 200) {
            return response.data.number;
        }
    } catch (error) {
        console.error(`Error fetching number for ID '${numberId}':`, error.message);
        return null;
    }
};

// Function to calculate average of an array of numbers
const calculateAverage = (numbers) => {
    const sum = numbers.reduce((acc, num) => acc + num, 0);
    return sum / numbers.length;
};

// Endpoint to handle requests for specific number IDs
app.get('/numbers/:numberId', async (req, res) => {
    const { numberId } = req.params;

    // Validate numberId against the allowed IDs ('p', 'f', 'e', 'r')
    if (!['p', 'f', 'e', 'r'].includes(numberId)) {
        return res.status(400).json({ error: "Invalid number ID" });
    }

    // Store previous state of numbersWindow
    const prevState = [...numbersWindow];

    // Fetch number from third-party server
    const newNumber = await fetchNumber(numberId);

    if (newNumber !== null && !numbersWindow.includes(newNumber)) {
        if (numbersWindow.length >= WINDOW_SIZE) {
            numbersWindow.shift();
        }
        numbersWindow.push(newNumber);
    }

    const currState = [...numbersWindow];
    const average = calculateAverage(currState);

    res.json({
        windowPrevState: prevState,
        windowCurrState: currState,
        numbers: newNumber !== null ? [newNumber] : [],
        avg: average.toFixed(2)
    });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

